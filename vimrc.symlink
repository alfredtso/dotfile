" Enabling filetype support provides filetype-specific indenting, syntax
" highlighting, omni-completion and other useful settings.
filetype plugin indent on
filetype plugin on
syntax on
" ctags
set tags=./tags;/

set nocursorline
set ttyfast
set lazyredraw
set laststatus=2
set clipboard=unnamed
set cmdheight=2
set ignorecase
" 'matchit.vim' is built-in so let's enable it!
" Hit '%' on 'if' to jump to 'else'.
"runtime macros/matchit.vim
set timeoutlen=1000 ttimeoutlen=0

" Annoying temporary files
set backupdir=/tmp//,.
set directory=/tmp//,.
if v:version >= 703
  set undodir=/tmp//,.
endif

"Key mappings
let mapleader=" "
"Open new line below and above the current line"
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>
"inoremap <C-d> <ESC>ddi

" Save
inoremap <C-s> <C-O>:update<cr>
nnoremap <C-s> :update<cr>

" Quit
inoremap <C-Q> <esc>:q<cr>
nnoremap <C-Q> :q<cr>
vnoremap <C-Q> <esc>

"inoremap jk <Esc>`^
"vnoremap jk <Esc>`^ 
" Make y behaves like other capitals
nnoremap Y y$

" qq to record, Q to replay
nnoremap Q @q

if has('nvim')
  tnoremap jk <C-\><C-n>`^
  tnoremap <M-[> <Esc>
  tnoremap <C-v><Esc> <Esc>
endif
" <F1> | NERD Tree
nnoremap <F1> :NERDTreeToggle<cr>

" <F2> | Tagbar
if v:version >= 703
  inoremap <F2> <esc>:TagbarToggle<cr>
  nnoremap <F2> :TagbarToggle<cr>
  let g:tagbar_sort = 0
endif

"""Window navigation"""
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l
" ----------------------------------------------------------------------------
" Markdown headings
" ----------------------------------------------------------------------------
nnoremap <leader>1 m`yypVr=``
nnoremap <leader>2 m`yypVr-``
nnoremap <leader>3 m`^i### <esc>``4l
nnoremap <leader>4 m`^i#### <esc>``5l
nnoremap <leader>5 m`^i##### <esc>``6l
" ----------------------------------------------------------------------------
" Buffers
" ----------------------------------------------------------------------------
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>

" ----------------------------------------------------------------------------
" Tabs
" ----------------------------------------------------------------------------
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>

" ----------------------------------------------------------------------------
" <tab> / <s-tab> | Circular windows navigation
" ----------------------------------------------------------------------------
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W


set mat=2

" various setting
"=====Tab Setting====="
set autoindent                 " Minimal automatic indenting for any filetype.
set smartindent					"does the right indent most of the time
set smarttab
set tabstop=4             " tab spacing
set cindent				  "stricter rules for c programs
set softtabstop=4         " unify
set shiftwidth=4          " indent/outdent by 4 columns
set shiftround            " always indent/outdent to the nearest tabstop
set backspace=indent,eol,start " Proper backspace behavior.
set hidden                     " Possibility to have more than one
                               " unsaved buffers.
set incsearch                  " Incremental search, hit '<CR>' to stop.
set hlsearch
set ruler                      " Shows the current line number at the bottom.
                               " right of the screen.
set wildmenu                   " Great command-line completion, use '<Tab>' to
                               " move around and '<CR>' to validate.
set number 		       " show line number
set colorcolumn=80								
"for the columnruler color
highlight ColorColumn ctermbg=0 guibg=#5f00ff
set background=dark
colorscheme solarized "color theme

set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildmode=full
set complete=.,b,u,]
set completeopt=menu,preview	"for built-in complete
set omnifunc=syntaxcomplete

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""Deoplete"""""""""""""""""""""""
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'arcticicestudio/nord-vim'
Plug 'https://github.com/junegunn/vim-github-dashboard.git'
Plug 'vim-syntastic/syntastic'
Plug 'junegunn/goyo.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jez/vim-better-sml'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes' " airline is the statusbar tool
Plug 'janko-m/vim-test'
Plug 'kassio/neoterm'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'luochen1990/rainbow'
Plug 'jpalardy/vim-slime'
Plug 'wlangstroth/vim-racket'
"Plug 'Valloric/YouCompleteMe'

"""Airline""""
let g:airline_theme='base16'
let g:airline#extensions#tabline#enabled = 1
"""""""""""""""""""""""""""
""""Syntastic""""
"""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

"The option should be set to something like: >
    let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": [] }


"""""""""""""""""""""""Deoplete"""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1
let g:python3_host_prog = '/usr/local/opt/python/libexec/bin/python'
let g:deoplete#custom#source#jedi#show_docstring =1
""""""""""""""""""""""""""Vim-test""""""""""""""""""""""""""
" these Ctrl mappings work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g
if has('nvim')
  let test#strategy = "neoterm"
  tnoremap <Esc> <C-\><C-n>
else
  let test#strategy = "asyncrun"
endif

"""""""""""""""""""""""""""""Fzf"""""""""""""""""""""""""""""
"nmap <leader><tab> <plug>(fzf-maps-n)
"xmap <leader><tab> <plug>(fzf-maps-x)
"omap <leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
"imap <c-x><c-k> <plug>(fzf-complete-word)
"imap <c-x><c-f> <plug>(fzf-complete-path)
"imap <c-x><c-j> <plug>(fzf-complete-file-ag)
"imap <c-x><c-l> <plug>(fzf-complete-line)
"nnoremap <silent> <Leader><Leader> :Files<CR>
"nnoremap <silent> <Leader><Enter>  :Buffers<CR>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_command_prefix = 'Fzf'
" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" In Neovim, you can set up fzf window using a Vim command
if has('nvim')
  let g:fzf_layout = { 'window': 'enew' }
  let g:fzf_layout = { 'window': '-tabnew' }
  let g:fzf_layout = { 'window': '10split enew' }

endif

"Rainbow"
let g:rainbow_active = 1

"Slime"
let g:slime_target = "neovim"
let g:slime_paste_file = "$HOME/.slime_paste"

"Tagbar"
let g:tagbar_autoclose = 1
"YCM
"let g:ycm_python_interpreter_path = ''
"let g:ycm_python_sys_path = []
"let g:ycm_extra_conf_vim_data = [
"  \  'g:ycm_python_interpreter_path',
"  \  'g:ycm_python_sys_path'
"  \]
"let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'
"
nnoremap <expr> <f3> len(filter(range(1, winnr('$')), 'getbufvar(winbufnr(v:val), "&buftype") == "quickfix"')) ? ":\<c-u>lclose\<cr>" : ":\<c-u>SyntasticCheck\<cr>"
